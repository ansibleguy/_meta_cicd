#!/usr/bin/env bash

# {{ ansible_managed }}

set -e -o pipefail

if [ -z "$1" ]
then
  echo 'Arguments:'
  echo '  1: repository name'
  echo '  2: badge status only (optional)'
  exit 1
fi

PATH_TEST='{{ tester.path.test }}/{{ test }}'
PATH_BADGE='{{ tester.path.web }}'
PATH_VENV='{{ tester.path.venv }}'
PATH_LOG="$PATH_BADGE/log"
HOME='{{ tester.path.home }}'
LOG_LINES='{{ tester.log.lines }}'

LABEL='Molecule'
status='RUNNING'
GALAXY_NAMESPACE='ansibleguy'
MOLECULE_CONFIG='molecule/default/molecule.yml'
EXIT_CODE_FAILED='{{ tester.rc.soft_fail }}'
exit_code=0

declare -A BADGE_COLORS
BADGE_COLORS[UNKNOWN]='#{{ tester.colors.wait }}'
BADGE_COLORS[MISSING]='#{{ tester.colors.wait }}'
BADGE_COLORS[RUNNING]='#{{ tester.colors.run }}'
BADGE_COLORS[PASSED]='#{{ tester.colors.ok }}'
BADGE_COLORS[FAILED-CONVERGE]='#{{ tester.colors.bad }}'
BADGE_COLORS[FAILED-IDEMPOTENCE]='#{{ tester.colors.bad }}'
BADGE_COLORS[FAILED-CHECK]='#{{ tester.colors.bad }}'
BADGE_COLORS[FAILED-VERIFY]='#{{ tester.colors.bad }}'
BADGE_COLORS[FAILED-ENVIRONMENT]='#{{ tester.colors.bad }}'

ROLE="$1"
LOG_FILE="${PATH_LOG}/molecule_${ROLE}_test.log"
LOG_FILE2="${PATH_LOG}/molecule_${ROLE}_test_short.log"

function update_badge {
  cd "$PATH_BADGE"
  if [[ "$collection" == "1" ]]
  then
    KEY_BADGE="collection_${ROLE}"
  else
    KEY_BADGE="$ROLE"
  fi
  rm -f "${KEY_BADGE}.{{ test }}.svg"
  anybadge --label="$LABEL" --value="${status} | $(date '+%Y-%m-%d %H:%M') GMT+2" --file="${KEY_BADGE}.{{ test }}" --color="${BADGE_COLORS[$status]}"
}

function update_logs {
  journalctl -u "ansible-test-molecule-${ROLE}.service" --full --no-pager -n "$LOG_LINES" > "$LOG_FILE"
  journalctl -u "ansible-test-molecule-${ROLE}.service" -n 10000 --full --no-pager | grep -E 'Starting Service|Finished Service|completed successful|FAILED' | grep -v 'Wait' > "$LOG_FILE2"
}

function cleanup {
  if [ -d "$PATH_TEST_FULL" ]
  then
    if [[ "$status" != "PASSED" ]]
    then
      cd "$PATH_TEST_FULL"
      molecule destroy
    fi
    cd /tmp
    rm -rf "$PATH_TEST_FULL"
  fi
  rm -rf "$HOME/.cache/molecule/${ROLE}"
  if [ -d "$HOME/.cache/ansible-compat" ]
  then
    find "$HOME/.cache/ansible-compat" -maxdepth 0 -type d -mmin +30 -exec rm -rf {} \;
  fi
}

function set_error {
  status="$1"
  exit_code="$EXIT_CODE_FAILED"
}

mkdir -p "$PATH_TEST"
source "${PATH_VENV}/bin/activate"
collection=0
cleanup

if [ -n "$2" ]
then
  status="$2"
  update_badge
  cleanup
  exit 0
fi

update_badge

# preparations for tests
if echo "$ROLE" | grep -q 'collection'
then
  ROLE=$(echo "$ROLE" | cut -d '_' -f2)
  collection=1
  PATH_TEST_FULL="${PATH_TEST}/collections/ansible_collections/${GALAXY_NAMESPACE}/${ROLE}"
  rm -rf "$PATH_TEST_FULL"
  ansible-galaxy collection install "git+https://github.com/${GALAXY_NAMESPACE}/collection_${ROLE}" -p "${PATH_TEST}/collections"
else
  PATH_TEST_FULL="${PATH_TEST}/${GALAXY_NAMESPACE}.${ROLE}"
  rm -rf "$PATH_TEST_FULL"
  ansible-galaxy install --roles-path "$PATH_TEST" "${GALAXY_NAMESPACE}.${ROLE}"
fi

cd "$PATH_TEST_FULL"

if ! [ -f "$MOLECULE_CONFIG" ]
then
  status='MISSING'
  update_badge
  cd /tmp
  rm -rf "$PATH_TEST_FULL"
  exit 0
fi

molecule create
molecule prepare

set +e  # soft-handling of failures
if ! molecule converge
then
  set_error 'FAILED-CONVERGE'
else
  if ! molecule verify
  then
    set_error 'FAILED-VERIFY'
  else
    if ! molecule idempotence
    then
      set_error 'FAILED-IDEMPOTENCE'
    else
      # check-mode can be disabled
      if cat "$MOLECULE_CONFIG" | grep '  - check' -q && ! molecule check
      then
        set_error 'FAILED-CHECK'
      else
        status='PASSED'
      fi
    fi
  fi
fi

update_logs
update_badge
cleanup
exit "$exit_code"
